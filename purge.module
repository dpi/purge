<?php

/**
 * @file
 * Purge clears url's from reverse proxy caches like Varnish and Squid by issuing HTTP PURGE requests.
 */

/**
 * Implements hook_menu().
 *
 * Set up admin settings callbacks, etc.
 */
function purge_menu() {
  $items = array();
  $items['admin/config/development/performance/purge'] = array(
    'title'             => 'Purge',
    'type'              => MENU_LOCAL_TASK,
    'page callback'     => 'purge_proxy_list',
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
  );
  $items['admin/config/development/performance/purge/add'] = array(
    'title'             => 'Add Proxy',
    'type'              => MENU_LOCAL_ACTION,
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('purge_proxy_form'),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
  );
  $items['admin/config/development/performance/purge/settings'] = array(
    'title'             => 'Advanced Settings',
    'description'       => 'Configure Advanced Purge Settings',
    'page callback'     => 'drupal_get_form',
    'type'              => MENU_LOCAL_ACTION,
    'page arguments'    => array('purge_admin_settings_form'),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
    'tab_parent'        => 'admin/config/development/performance/purge',
  );
  $items['admin/config/development/performance/purge/edit/%'] = array(
    'title'             => 'Edit Proxy',
    'type'              => MENU_CALLBACK,
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('purge_proxy_form', 6),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
    'tab_parent'        => 'admin/config/development/performance/purge',
  );
  $items['admin/config/development/performance/purge/enable/%'] = array(
    'type'              => MENU_CALLBACK,
    'page callback'     => 'purge_proxy_enable',
    'page arguments'    => array(6, '1'),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
  );
  $items['admin/config/development/performance/purge/disable/%'] = array(
    'type'              => MENU_CALLBACK,
    'page callback'     => 'purge_proxy_enable',
    'page arguments'    => array(6, '0'),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
  );
  $items['admin/config/development/performance/purge/delete/%'] = array(
    'type'              => MENU_CALLBACK,
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('purge_proxy_delete_form', 6),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
  );
  //}
  return $items;
}


/**
 * Implements hook_expire_cache().
 *
 * Takes an array from expire.module and issues purges.
 */
function purge_expire_cache($expire_urls) {
  module_load_include('inc', 'purge');
  $purge_requests = purge_urls($expire_urls);
  // Issue the requests using curl (for now)
  $purge_results =  purge_issue_requests_curl($purge_requests);
  purge_logging($purge_results);
}
