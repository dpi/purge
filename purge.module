<?php

/**
 * @file
 * Purge clears url's from reverse proxy caches like Varnish and Squid by issuing HTTP PURGE requests.
 */

/**
 * Implements hook_menu().
 *
 * Set up admin settings callbacks, etc.
 */
function purge_menu() {
  $items = array();
  $items['admin/config/development/performance/purge'] = array(
    'title'             => 'Purge',
    'type'              => MENU_LOCAL_TASK,
    'page callback'     => 'purge_proxy_list',
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
  );
  $items['admin/config/development/performance/purge/add'] = array(
    'title'             => 'Add Proxy',
    'type'              => MENU_LOCAL_ACTION,
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('purge_proxy_form'),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
  );
  $items['admin/config/development/performance/purge/settings'] = array(
    'title'             => 'Advanced Settings',
    'description'       => 'Configure Advanced Purge Settings',
    'page callback'     => 'drupal_get_form',
    'type'              => MENU_LOCAL_ACTION,
    'page arguments'    => array('purge_admin_settings_form'),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
    'tab_parent'        => 'admin/config/development/performance/purge',
  );
  $items['admin/config/development/performance/purge/edit/%'] = array(
    'title'             => 'Edit Proxy',
    'type'              => MENU_CALLBACK,
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('purge_proxy_form', 6),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
    'tab_parent'        => 'admin/config/development/performance/purge',
  );
  $items['admin/config/development/performance/purge/enable/%'] = array(
    'type'              => MENU_CALLBACK,
    'page callback'     => 'purge_proxy_enable',
    'page arguments'    => array(6, '1'),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
  );
  $items['admin/config/development/performance/purge/disable/%'] = array(
    'type'              => MENU_CALLBACK,
    'page callback'     => 'purge_proxy_enable',
    'page arguments'    => array(6, '0'),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
  );
  $items['admin/config/development/performance/purge/delete/%'] = array(
    'type'              => MENU_CALLBACK,
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('purge_proxy_delete_form', 6),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
  );
  //}
  return $items;
}


/**
 * Implements hook_expire_cache().
 *
 * Takes an array from expire.module and issues purges.
 */
function purge_expire_cache($expire_urls) {
  module_load_include('inc', 'purge');
  $results = purge_urls($expire_urls);
  purge_logging($results);
}

/**
 * Function to retrieve proxy configurations
 */
function purge_proxy_get_config($pid = 0, $view = 'FULL', $status = 'ACTIVE') {
  $proxy_confs = array();
  //Query the proxy configuration table
  $query = db_select('purge_proxy', 'p');

  // Gather the fields needed
  if ($view == 'NAME') {
    $fields = array('pid', 'type', 'name');
  }
  if ($view == 'LIST') {
    $fields = array('pid', 'type', 'name', 'description', 'enabled', 'active');
  }
  if ($view == 'FULL') {
    $fields = array('pid', 'type', 'name', 'description', 'enabled', 'active',
      'proxy_ssl', 'proxy_host', 'proxy_port', 'options_type', 'options_parallel',
      'options_nonblocking', 'domains', 'url_prefix', 'url_wildcards', 'headers');
  }
  $query->fields('p', $fields);

  // Set conditions
  if ($status != 'SYSTEM') {
    $query->condition('type', 0, '>');
  }
  if ($status == 'ACTIVE') {
    $query->condition('active', 1);
    $query->condition('enabled', 1);
    $query->condition('type', 2, '>');
  }
  if ($pid > 0) {
    $query->condition('pid', $pid);
  }

  // Order, order, order.
  $query->orderBy('active', 'DESC');
  $query->orderBy('enabled', 'DESC');

  // Execute query and parse results
  $result = $query->execute();
  foreach ($result as $record) {
    $proxy_confs[$record->pid]['pid'] = $record->pid;
    $proxy_confs[$record->pid]['type'] = $record->type;
    $proxy_confs[$record->pid]['name'] = $record->name;
    if (($view == 'LIST') or ($view == 'FULL')) {
      $proxy_confs[$record->pid]['description'] = $record->description;
      $proxy_confs[$record->pid]['enabled'] = $record->enabled;
      $proxy_confs[$record->pid]['active'] = $record->active;
    }
    if ($view == 'FULL') {
      // Check to use the base url or manual settings
      if ($record->proxy_host == '_USE_BASEURL_') {
        $proxy_confs[$record->pid]['proxy_use_baseurl'] = True;
        $proxy_confs[$record->pid]['proxy_host'] = '';
      }
      else {
        $proxy_confs[$record->pid]['proxy_use_baseurl'] = False;
        $proxy_confs[$record->pid]['proxy_host'] = $record->proxy_host;
      }
      $proxy_confs[$record->pid]['proxy_ssl'] = $record->proxy_ssl;
      $proxy_confs[$record->pid]['proxy_port'] = $record->proxy_port;

      // Set options
      $proxy_confs[$record->pid]['options_type'] = $record->options_type;
      $proxy_confs[$record->pid]['options_parallel'] = $record->options_parallel;
      $proxy_confs[$record->pid]['options_nonblocking'] = $record->options_nonblocking;

      // Set domains
      $proxy_confs[$record->pid]['domains_expire'] = False;
      $proxy_confs[$record->pid]['domains_drupal'] = False;
      $custom_domains = array();
      $domains = array();
      //$domains = preg_split ('/$\R?^/m', $record->domains);
      $domains = explode(',', $record->domains);
      foreach ($domains as $domain) {
        // Set Expire option
        if ($domain == '_DOMAINS_EXPIRE_') {
          $proxy_confs[$record->pid]['domains_expire'] = True;
        }
        // Set Drupal option
        elseif ($domain == '_DOMAINS_DRUPAL_') {
          $proxy_confs[$record->pid]['domains_drupal'] = True;
        }
        else {
          $custom_domains[] = $domain;
        }
      }
      $proxy_confs[$record->pid]['domains_custom'] = $custom_domains;
      // Set URL options
      $proxy_confs[$record->pid]['url_prefix'] = $record->url_prefix;
      $proxy_confs[$record->pid]['url_wildcards'] = $record->url_wildcards;
      // Set headers
      $proxy_confs[$record->pid]['headers_gzip'] = False;
      $custom_headers = array();
      $headers = array();
      $headers = explode(',', $record->headers);
      foreach ($headers as $header) {
        // Set gzip option
        if ($header == 'Accept-Encoding: gzip') {
          $proxy_confs[$record->pid]['headers_gzip'] = True;
        }
        else {
          $custom_headers[] = $header;
        }
      }
      $proxy_confs[$record->pid]['headers_custom'] = $custom_headers;
    }
  }
  return $proxy_confs;
}
