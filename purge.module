<?php

/**
 * @file
 * Purge clears url's from reverse proxy caches like Varnish and Squid by issuing HTTP PURGE requests.
 */

/**
 * Implements hook_menu().
 *
 * Set up admin settings callbacks, etc.
 */
function purge_menu() {
  $items = array();
  $items['admin/config/system/purge'] = array(
    'title'             => 'Purge',
    'description'       => 'Configure proxy cache purges.',
    'page callback'     => 'drupal_get_form',
    //'type'              => MENU_LOCAL_TASK,
    'type'              => MENU_NORMAL_ITEM,
    'page arguments'    => array('purge_admin_settings_form'),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
  );
  $items['admin/config/system/purge/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );
  $items['admin/config/system/purge/proxy'] = array(
    'title' => 'Proxy configuration',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'purge_proxy_list',
    'access arguments' => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
  //  'tab_parent'        => 'admin/config/system/purge/',

  );
  $items['admin/config/system/purge/proxy/add'] = array(
    'title' => 'Add Proxy',
    'type' => MENU_LOCAL_TASK,
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('purge_proxy_form'),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
  //  'tab_parent'        => 'admin/config/system/purge/proxy',
  );
  $items['admin/config/system/purge/proxy/%proxy_name/edit'] = array(
    'title' => 'Edit Proxy',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('purge_proxy_form', 5),
    'access arguments'  => array('administer site configuration'),
    'file path'         => drupal_get_path('module', 'purge'),
    'file'              => 'purge.admin.inc',
    'tab_parent'        => 'admin/config/system/purge/proxy',
  );

  return $items;
}


/**
 * Implements hook_expire_cache().
 *
 * Takes an array from expire.module and issues purges.
 */
function purge_expire_cache($expire_urls) {
  module_load_include('inc', 'purge');
  $results = purge_urls($expire_urls);
  purge_logging($results);
}

/**
 * Function to retrieve proxy configurations
 */
function purge_proxy_get_config($pid = 0, $status = 'ACTIVE', $view = 'FULL') {
  $proxy_confs = array();
 // $active_proxies = &drupal_static(__FUNCTION__);
 // if (!isset($all_proxies)) {
 // }
  //Query the proxy configuration table
  $query = db_select('purge_proxy', 'p');

  // Gather the fields needed
  if ($view = 'NAME') {
    $fields = array('name');
  }
  if ($view = 'LIST') {
    $fields = array('name', 'pid', 'enabled', 'active', 'isdefault');
  }
  if ($view = 'FULL') {
    $full_fields = array('proxy_protocol', 'proxy_host', 'proxy_port', 'proxy_wildcards', 'purge_type', 'host_expire',
      'host_drupal', 'host_custom', 'url_prefix', 'headers');
    $fields = array_merge($fields, $full_fields);
  }
  $query->fields('p', $fields);

  // Set conditions
  if ($status = 'ACTIVE') {
    $query->condition('active', 1);
  }
  if ($pid > 0) {
    $query->condition('pid', $pid);
  }

  // Order, order, order.
  $query->orderBy('isdefault', 'DESC');
  $query->orderBy('active', 'DESC');
  $query->orderBy('enabled', 'DESC');

// print_r($query->__toString());
  // Execute query and parse results
  $result = $query->execute();
  foreach ($result as $record) {
    $proxy_confs[$record->pid]['pid'] = $record->pid;
    $proxy_confs[$record->pid]['name'] = $record->name;
    $proxy_confs[$record->pid]['enabled'] = $record->enabled;
    $proxy_confs[$record->pid]['active'] = $record->active;
    $proxy_confs[$record->pid]['isdefault'] = $record->isdefault;
  }
  // dprint_r($proxy_confs);
  return $proxy_confs;
}

