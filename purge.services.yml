parameters:

  # Enable Drupal's X-Drupal-Cache-Tags response header. This HTTP response
  # header describes what got rendered onto every page with descriptive text
  # keys uniquely identifying every rendered object. This then enables external
  # caching platforms - exactly what this module is for - to leverage this.
  http.response.debug_cacheability_headers: true

services:

  # PURGE.QUEUERS
  #
  # Manages services tagged 'purge_queuer' by exposing them in end-user
  # interfaces and allowing users to disable/enable them.
  purge.queuers:
    class: Drupal\purge\Queuer\Service
    calls:
    - [setContainer, ['@service_container']]
  purge.queuers.cache_tags:
    class: Drupal\purge\Queuer\CacheTagsQueuer
    arguments: ['@config.factory', '@purge.queue', '@purge.invalidation.factory']
    tags:
      - { name: cache_tags_invalidator }
      - { name: purge_queuer }

  # PURGE.INVALIDATION.FACTORY
  #
  # The invalidation object factory, generates 'purge instruction' value objects
  # on demand. Invalidations have state and flow freely between queue and
  # purgers, but can also be instantiated through the factory and get fed to the
  # purger straight away.
  purge.invalidation.factory:
    class: Drupal\purge\Invalidation\Service
    arguments: ['@plugin.manager.purge.invalidation']
  plugin.manager.purge.invalidation:
    class: Drupal\purge\Invalidation\PluginManager
    parent: default_plugin_manager

  # PURGE.QUEUE:
  #
  # The queue service which stores, claims, releases and accepts invalidation
  # objects returning from 'purge.purgers'.
  purge.queue:
    class: Drupal\purge\Queue\Service
    arguments: ['@plugin.manager.purge.queue', '@config.factory', '@purge.invalidation.factory']
    tags:
      - { name: needs_destruction }
  plugin.manager.purge.queue:
    class: Drupal\purge\Queue\PluginManager
    parent: default_plugin_manager

  # PURGE.DIAGNOSTICS:
  #
  # The diagnostics service which monitors and warns for problematic situations
  # that can occur during purging. When it detects severe issues, it will
  # prevent all purges in the first place.
  purge.diagnostics:
    class: Drupal\purge\DiagnosticCheck\Service
    arguments: ['@plugin.manager.purge.diagnostics']
    calls:
    - [setContainer, ['@service_container']]
  plugin.manager.purge.diagnostics:
    class:  Drupal\purge\DiagnosticCheck\PluginManager
    parent: default_plugin_manager

  # PURGE.PROCESSORS
  #
  # Processing policies work the queue and put purgers actively to work. These
  # are services tagged 'purge_processor' provided by submodules.
  purge.processors:
    class: Drupal\purge\Processor\Service
    calls:
    - [setContainer, ['@service_container']]

  # PURGE.PURGERS:
  #
  # The executive service which lets enabled purgers invalidate external caches.
  purge.purgers:
    class: Drupal\purge\Purger\Service
    arguments: ['@plugin.manager.purge.purgers', '@config.factory', '@state']
  plugin.manager.purge.purgers:
    class: Drupal\purge\Purger\PluginManager
    parent: default_plugin_manager

  # LOGGER.CHANNEL.PURGE
  #
  # Unified logger channel for the purge module and all its submodules. The core
  # purge APIs won't log anything at all, but leaves that up to purgers,
  # processing policies and other submodules.
  logger.channel.purge:
    parent: logger.channel_base
    arguments: ['purge']
