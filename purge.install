<?php

/**
 * @file
 * Purge install requirements and uninstall code.
 */

/**
 * Implements hook_schema().
 */
function purge_schema() {
  $schema['purge_proxy'] = array(
    'description' => t('Table storing proxy configurations'),
    'export' => array(
      'key' => 'name',
      'key' => 'Name',
      'primary key' => 'pid',
      'identifier' => 'proxy',
      'default hook' => 'default_purge_proxy',
      'api' => array(
        'owner' => 'purge',
        'api' => 'default_purge_proxies',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'pid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'no export' => TRUE, 
      ),
      'type' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Type of configuration. 0 = System, 1 = Platform, 2 = Contrib, 3 = User',
        'no export' => TRUE, 
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '40',
        'description' => 'Machine readable name of the proxy configuration.',
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Describe the description field... yeah, right',
      ),
      'enabled' => array(
        'type' => 'int',
        'size' => 'tiny',
        'description' => 'Is the proxy enabled?',
      ),
      'active' => array(
        'type' => 'int',
        'size' => 'tiny',
        'description' => 'Is the proxy currenty active?',
      ),
      'isdefault' => array(
        'type' => 'int',
        'size' => 'tiny',
        'description' => 'Is this proxy the default configuration?',
      ),
      'proxy_ssl' => array(
        'type' => 'int',
        'size' => 'tiny',
        'description' => 'Use the https protocol.',
      ),
      'proxy_host' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'The host name or ip address.',
      ),
      'proxy_port' => array(
        'type' => 'varchar',
        'length' => '5',
      ),
      'options_type' => array(
        'type' => 'varchar',
        'length' => '8',
        'description' => 'The type of http request issued. Either PURGE or GET.',
      ),
      'options_parallel' => array(
        'type' => 'int',
        'size' => 'tiny',
        'description' => 'Purge requests are send in parallel.',
      ),
      'options_nonblocking' => array(
        'type' => 'int',
        'size' => 'tiny',
        'description' => 'Purge requests nonblocking.',
      ),
      'domains' => array(
        'type' => 'text',
        'description' => 'Domain names to be used for purge requests',
      ),
      'url_prefix' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'The string inserted before the purged url.',
      ),
      'url_wildcards' => array(
        'type' => 'int',
        'size' => 'tiny',
        'description' => 'Does this proxy accept wildcard purges?',
      ),
      'headers' => array(
        'type' => 'text',
        'description' => 'Additional headers to be added to the request.',
      ),
    ),
    'primary key' => array('pid'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );
  return $schema;
}
    
/**
 * Implements hook_requirements().
 */
function purge_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();
  if ($phase == 'install') {
    // Check if curl is installed and block installation if it is not
    if (!extension_loaded('curl')) {
      $requirements['purge'] = array(
        'description' => $t('PHP curl extension not enabled. See http://php.net/manual/en/curl.installation.php'),
        'severity' => REQUIREMENT_ERROR
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function purge_uninstall() {
  // Clean up the settings variable
  variable_del('purge_proxy_urls');
}
